<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }

        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
            padding: 40px;
            transition: transform 0.3s ease;
            animation: fadeIn 0.5s ease-out;
        }

        .dashboard-container:hover {
            transform: translateY(-5px);
        }

        h1 {
            text-align: center;
            margin-bottom: 30px;
            color: #333;
            font-size: 32px;
            font-weight: 600;
        }

        .actions {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-secondary {
            background: #f0f0f0;
            color: #333;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
            font-weight: 600;
        }

        tr:hover {
            background-color: #f5f5f5;
        }

        img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%;
        }

        .badge {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            cursor: pointer;
        }

        .badge-success {
            background-color: #28a745;
            color: white;
        }

        .badge-warning {
            background-color: #ffc107;
            color: #333;
        }

        .btn-small {
            padding: 5px 10px;
            font-size: 14px;
        }

        .btn-delete {
            background-color: #dc3545;
            color: white;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 768px) {
            .actions {
                flex-direction: column;
            }

            .btn {
                margin-bottom: 10px;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.1.9/sweetalert2.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.1.9/sweetalert2.all.min.js"></script>
</head>
<body>
    <div class="dashboard-container">
        <h1>Admin Dashboard</h1>

        <div class="actions">
            <a href="/admin/logout" class="btn btn-secondary">Logout</a>
        </div>

        <div class="table-container" id="user-table">
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Mobile</th>
                        <th>Image</th>
                        <th>Verified</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% if(users.length > 0) { %>
                        <% users.forEach(user => { %>
                            <tr data-user-id="<%= user._id %>">
                                <td><%= user.name %></td>
                                <td><%= user.email %></td>
                                <td><%= user.mobile %></td>
                                <td><img src="/uploads/<%= user.image %>" alt="<%= user.name %>"></td>
                                <td>
                                    <span class="badge <%= user.is_verified ? 'badge-success' : 'badge-warning' %>" 
                                          onclick="toggleVerification('<%= user._id %>', <%= user.is_verified %>)">
                                        <%= user.is_verified ? 'Verified' : 'Not Verified' %>
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-small btn-delete" onclick="deleteUser('<%= user._id %>')">Delete</button>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="6">No Users Found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        function deleteUser(userId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/${userId}`, {
                        method: 'DELETE',
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const userRow = document.querySelector(`tr[data-user-id="${userId}"]`);
                            if (userRow) {
                                userRow.remove();
                            }
                            if (document.querySelectorAll('#user-table tbody tr').length === 0) {
                                document.querySelector('#user-table tbody').innerHTML = '<tr><td colspan="6">No Users Found</td></tr>';
                            }
                            Swal.fire(
                                'Deleted!',
                                'The user has been deleted.',
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to delete user. Please try again.',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'An error occurred while deleting the user.',
                            'error'
                        );
                    });
                }
            });
        }
    
        function toggleVerification(userId, currentStatus) {
            fetch(`/admin/${userId}/toggle-verification`, {
                method: 'POST', // Match the backend route definition
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ is_verified: !currentStatus }),
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to update verification status');
                }
            })
            .then(data => {
                if (data.success) {
                    const badge = document.querySelector(`tr[data-user-id="${userId}"] .badge`);
                    if (badge) {
                        if (data.is_verified) {
                            badge.classList.remove('badge-warning');
                            badge.classList.add('badge-success');
                            badge.textContent = 'Verified';
                        } else {
                            badge.classList.remove('badge-success');
                            badge.classList.add('badge-warning');
                            badge.textContent = 'Not Verified';
                        }
                        badge.onclick = () => toggleVerification(userId, data.is_verified);
                    }
                    Swal.fire(
                        'Updated!',
                        `User verification status has been ${data.is_verified ? 'verified' : 'unverified'}.`,
                        'success'
                    );
                } else {
                    Swal.fire(
                        'Error!',
                        'Failed to update verification status. Please try again.',
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                    'Error!',
                    'An error occurred while updating the verification status.',
                    'error'
                );
            });
        }
    </script>
    
</body>
</html>